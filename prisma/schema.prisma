// This is the complete schema built from "first principles" based on the detailed vision.
// This version FIXES all P1012 validation errors.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -----------------------------------------------------------------
// 1. USERS (STAFF) & ROLES
// -----------------------------------------------------------------

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  pin       String   @unique
  role      Role     @default(SERVER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders            HandledOrder[]
  acknowledgedCalls ServerCall[]   @relation("AcknowledgedCalls")
  resolvedCalls     ServerCall[]   @relation("ResolvedCalls")
  
  // --- FIX ---
  // Replaced the array with a proper relation to the new 'StaffAssignment' join table.
  assignedWorkstations StaffAssignment[]
}

enum Role {
  SERVER
  BARTENDER
  COOK
  CASHIER
  DJ
  MANAGER
  OWNER
}

// -----------------------------------------------------------------
// 2. CLIENTS, WALLETS & AUTHENTICATION
// -----------------------------------------------------------------

model Client {
  id            String   @id @default(cuid())
  name          String
  phone         String   @unique
  email         String?  @unique
  cpf           String?  @unique
  pin           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  wallet        ClientWallet?
  visits        Visit[]
  orders        Order[]
  topUpRequests WalletTransaction[]
}

model ClientWallet {
  id           String   @id @default(cuid())
  clientId     String   @unique
  client       Client   @relation(fields: [clientId], references: [id])
  balance      Decimal  @default(0.00)
  updatedAt    DateTime @updatedAt

  transactions WalletTransaction[]
}

model WalletTransaction {
  id           String            @id @default(cuid())
  walletId     String
  wallet       ClientWallet      @relation(fields: [walletId], references: [id])
  clientId     String?
  client       Client?           @relation(fields: [clientId], references: [id])
  amount       Decimal
  type         TransactionType
  status       TransactionStatus
  proofOfPay   String?
  approvedBy   String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum TransactionType {
  TOP_UP
  SPEND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

// -----------------------------------------------------------------
// 3. VENUE, VISITS & TABS
// -----------------------------------------------------------------

model FloorPlan {
  id        String   @id @default(cuid())
  name      String
  width     Int      @default(100)
  height    Int      @default(100)
  floorGrid Json?

  objects VenueObject[]
}

model VenueObject {
  id            String          @id @default(cuid())
  name          String
  floorPlanId   String
  floorPlan     FloorPlan       @relation(fields: [floorPlanId], references: [id])
  anchorX       Int
  anchorY       Int
  shape         Json
  type          VenueObjectType @default(TABLE)
  qrCodeId      String          @unique @default(cuid())
  capacity      Int?
  isReservable  Boolean         @default(false)
  reservationCost Decimal?
  workstationId   String?
  workstation     Workstation?    @relation(fields: [workstationId], references: [id])

  visits      Visit[]
  serverCalls ServerCall[]
  
  // --- FIX ---
  // Replaced the array with a proper relation to the new 'StaffAssignment' join table.
  assignedStaff StaffAssignment[]
}

enum VenueObjectType {
  TABLE
  BAR_SEAT
  WORKSTATION
  ENTERTAINMENT
  IMPASSABLE
}

// --- FIX ---
// This is the NEW explicit join table for the many-to-many relationship
// between 'User' (Staff) and 'VenueObject' (Workstations).
model StaffAssignment {
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  venueObjectId String
  venueObject   VenueObject @relation(fields: [venueObjectId], references: [id])
  assignedAt    DateTime    @default(now())

  @@id([userId, venueObjectId])
}

model Tab {
  id          String   @id @default(cuid())
  rfid        String   @unique
  isActive    Boolean  @default(true)
  isInUse     Boolean  @default(false)
  
  // --- FIX ---
  // Added the other side of the 1-to-1 relation, using the same name "activeVisit".
  activeVisit Visit?   @relation("activeVisit")
}

model Visit {
  id            String       @id @default(cuid())
  clientId      String
  client        Client       @relation(fields: [clientId], references: [id])
  
  tabId         String       @unique
  // This side was correct
  tab           Tab          @relation(fields: [tabId], references: [id], name: "activeVisit")
  
  venueObjectId String?
  venueObject   VenueObject? @relation(fields: [venueObjectId], references: [id])
  
  checkInAt     DateTime     @default(now())
  checkOutAt    DateTime?
  totalSpent    Decimal      @default(0.00)

  orders      Order[]
  serverCalls ServerCall[]
}

// -----------------------------------------------------------------
// 4. ORDERING SYSTEM
// -----------------------------------------------------------------

model Workstation {
  id    String @id @default(cuid())
  name  String @unique // "BAR", "KITCHEN", "COFFEE", "EXPEDITOR"
  
  venueObjects VenueObject[]
  orderItems   OrderItem[]
  
  // --- FIX ---
  // Added the other side of the 1-to-Many relation with 'Product'.
  products     Product[]
}

model Order {
  id        String      @id @default(cuid())
  visitId   String
  visit     Visit       @relation(fields: [visitId], references: [id])
  clientId  String?
  client    Client?     @relation(fields: [clientId], references: [id])
  total     Decimal
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  
  items     OrderItem[]
  handledBy HandledOrder[]
}

model OrderItem {
  id            String          @id @default(cuid())
  orderId       String
  order         Order           @relation(fields: [orderId], references: [id])
  productId     String
  product       Product         @relation(fields: [productId], references: [id])
  quantity      Int
  unitPrice     Decimal
  totalPrice    Decimal
  status        OrderItemStatus @default(PENDING)
  workstationId String
  workstation   Workstation     @relation(fields: [workstationId], references: [id])
  createdAt     DateTime        @default(now())
  preparedAt    DateTime?
  deliveredAt   DateTime?
}

model HandledOrder {
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  @@id([orderId, userId])
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum OrderItemStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

// -----------------------------------------------------------------
// 5. PRODUCTS, RECIPES & INVENTORY
// -----------------------------------------------------------------

model Ingredient {
  id          String   @id @default(cuid())
  name        String   @unique
  unit        String
  stock       Decimal  @default(0)
  costPerUnit Decimal
  
  recipeSteps RecipeIngredient[]
}

model Product {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Decimal
  imageUrl      String?
  type          ProductType @default(DRINK)
  
  prepStationId String
  // This side was correct
  prepStation   Workstation @relation(fields: [prepStationId], references: [id])

  orderItems    OrderItem[]
  recipe        Recipe?
}

enum ProductType {
  FOOD
  DRINK
}

model Recipe {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id])
  notes       String?
  difficulty  Int?     @default(1)
  
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  recipeId     String
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Decimal
}

model RecipeStep {
  id          String   @id @default(cuid()) // <-- FIX: Was "cDuid()"
  recipeId    String
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  stepNumber  Int
  instruction String
  motion      String?
  prepTime    Int?
  cookTime    Int?
  waitTime    Int?
}

// -----------------------------------------------------------------
// 6. ENTERTAINMENT & BI
// -----------------------------------------------------------------

model Entertainer {
  id              String           @id @default(cuid())
  name            String
  type            EntertainerType
  bio             String?
  imageUrl        String?
  rate            Decimal?
  
  scheduledEvents ScheduledEvent[]
}

enum EntertainerType {
  BAND
  DJ
}

model ScheduledEvent {
  id            String      @id @default(cuid())
  entertainerId String
  entertainer   Entertainer @relation(fields: [entertainerId], references: [id])
  startTime     DateTime
  endTime       DateTime
  
  liveSession   DJSession?
}

model DJSession {
  id              String       @id @default(cuid())
  eventId         String       @unique
  event           ScheduledEvent @relation(fields: [eventId], references: [id])
  actualStartTime DateTime     @default(now())
  actualEndTime   DateTime?
  status          String       @default("LIVE")
  
  tracksPlayed    DJSetTrack[]
}

model DJSetTrack {
  id            String      @id @default(cuid())
  sessionId     String
  session       DJSession   @relation(fields: [sessionId], references: [id])
  vinylRecordId String
  vinylRecord   VinylRecord @relation(fields: [vinylRecordId], references: [id])
  playedAt      DateTime    @default(now())
}

// -----------------------------------------------------------------
// 7. VINYL LIBRARY
// -----------------------------------------------------------------

model VinylLibrarySlot {
  id       String @id @default(cuid())
  row      Int
  column   Int
  capacity Int    @default(30)
  
  records  VinylRecord[]

  @@unique([row, column])
}

model VinylRecord {
  id             String   @id @default(cuid())
  title          String
  artist         String
  genre          String?
  year           Int?
  imageUrl       String?
  slotId         String
  slot           VinylLibrarySlot @relation(fields: [slotId], references: [id])
  positionInSlot Int
  
  setsPlayed     DJSetTrack[]

  @@unique([slotId, positionInSlot])
}

// -----------------------------------------------------------------
// 8. SERVER CALL SYSTEM
// -----------------------------------------------------------------

model ServerCall {
  id            String       @id @default(cuid())
  visitId       String
  visit         Visit        @relation(fields: [visitId], references: [id])
  venueObjectId String
  venueObject   VenueObject  @relation(fields: [venueObjectId], references: [id])
  status        ServerCallStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  
  acknowledgedByUserId String?
  acknowledgedBy       User?   @relation("AcknowledgedCalls", fields: [acknowledgedByUserId], references: [id])
  acknowledgedAt       DateTime?

  resolvedByUserId String?
  resolvedBy       User?   @relation("ResolvedCalls", fields: [resolvedByUserId], references: [id])
  resolvedAt       DateTime?
}

enum ServerCallStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
}